/*
Copyright 2017 caicloud authors. All rights reserved.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	kubernetes "github.com/caicloud/clientset/kubernetes"
	v1alpha1 "github.com/caicloud/clientset/listers/config/v1alpha1"
	config_v1alpha1 "github.com/caicloud/clientset/pkg/apis/config/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
	client_go_kubernetes "k8s.io/client-go/kubernetes"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// ConfigClaimInformer provides access to a shared informer and lister for
// ConfigClaims.
type ConfigClaimInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ConfigClaimLister
}

type configClaimInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

func newConfigClaimInformer(client kubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	sharedIndexInformer := cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.ConfigV1alpha1().ConfigClaims(v1.NamespaceAll).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.ConfigV1alpha1().ConfigClaims(v1.NamespaceAll).Watch(options)
			},
		},
		&config_v1alpha1.ConfigClaim{},
		resyncPeriod,
		cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
	)

	return sharedIndexInformer
}

func (f *configClaimInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&config_v1alpha1.ConfigClaim{}, func(client client_go_kubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
		// panic if client is not *kubernetes.Clientset
		return newConfigClaimInformer(client.(kubernetes.Interface), resyncPeriod)
	})
}

func (f *configClaimInformer) Lister() v1alpha1.ConfigClaimLister {
	return v1alpha1.NewConfigClaimLister(f.Informer().GetIndexer())
}
